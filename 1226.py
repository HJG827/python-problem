# 1226. [S/W 문제해결 기본] 7일차 - 미로1 D4
'''
1
1111111111111111
1210000000100011
1010101110101111
1000100010100011
1111111010101011
1000000010101011
1011111110111011
1010000010001011
1010101111101011
1010100010001011
1010111010111011
1010001000100011
1011101111101011
1000100000001311
1111111111111111
1111111111111111
2
1111111111111111
1200000010000011
1011111011111011
1000001010000011
1110101010111011
1010101010100011
1011111010111111
1000001010000011
1011101011111011
1010101010000011
1010101010111111
1010100000130011
1010111111111011
1000000000000011
1111111111111111
1111111111111111
'''
def find_start(arr):
    for r in range(16):
        for c in range(16):
            if arr[r][c] == 2:
                return r, c

def dfs(r, c):
    
    visited[r][c] = 1
    if arr[r][c] == 3:
        return 1
    
    for dr, dc in ([0,1],[1,0], [0,-1],[-1,0]):
        nr = r + dr
        nc = c + dc
        if (
            0 <= nr < 16
            and 0 <= nc < 16
            and arr[nr][nc] != 1
            and not visited[nr][nc]
        ):
            visited[nr][nc] = 1
            if dfs(nr, nc):
                return 1
            visited[nr][nc] = 0
    return 0


for _ in range(10):
    tc = int(input())
    arr = [list(map(int, input())) for _ in range(16)]
    start_r, start_c = find_start(arr)
    visited = [[0]*16 for _ in range(16)]
    print(f'#{tc} {dfs(start_r, start_c)}')
